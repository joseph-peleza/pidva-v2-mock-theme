{"version":3,"sources":["components/AppModuleHeader/index.js","routes/inBuiltApps/FirebaseCRUD/AddContact/index.js","routes/inBuiltApps/FirebaseCRUD/ContactList/ContactCell/index.js","routes/inBuiltApps/FirebaseCRUD/ContactList/index.js","components/InfoView/index.js","routes/inBuiltApps/FirebaseCRUD/index.js","appRedux/actions/Contact.js"],"names":["AppModuleHeader","state","popoverOpen","toggle","bind","this","setState","props","placeholder","onChange","value","className","type","React","Component","defaultProps","styleName","notification","apps","AddContact","contact","id","thumb","name","email","phone","designation","starred","frequently","contactId","onSaveContact","onContactClose","open","title","IntlMessages","visible","closable","onOk","onCancel","size","src","required","event","target","defaultValue","margin","autosize","minRows","maxRows","options","ContactCell","addContactState","onDeleteContact","onEditContact","menus","onClick","e","key","map","option","Item","addFavourite","charAt","toUpperCase","alt","overlay","placement","trigger","ContactList","contactList","_","InfoView","nextProps","error","message","setTimeout","hideMessage","loading","displayMessage","console","log","Auxiliary","CircularProgress","info","connect","common","filterOptions","icon","FirebaseCRUD","ContactSideBar","user","CustomScrollbars","onAddContact","selectedSectionId","onFilterOptionSelect","data","onUpdateContact","filterOption","allContact","filter","filterContact","userName","toLowerCase","indexOf","handleRequestClose","showMessage","noContentFoundMessage","alertMessage","drawerState","avatar","searchUser","selectedContact","onGetAllContact","evt","onClose","onToggleDrawer","updateContactUser","length","dispatch","FETCH_START","database","ref","on","snapshot","FETCH_SUCCESS","GET_All_CONTACT_SUCCESS","payload","val","push","child","update","remove"],"mappings":"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","file":"static/js/102.d82e8515.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass AppModuleHeader extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      popoverOpen: false\r\n    };\r\n    this.toggle = this.toggle.bind(this);\r\n\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      popoverOpen: !this.state.popoverOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {placeholder, onChange, value} = this.props;\r\n\r\n    return (\r\n      <div className=\"gx-module-box-header-inner\">\r\n        <div\r\n          className=\"gx-search-bar gx-lt-icon-search-bar-lg gx-module-search-bar gx-d-none gx-d-sm-block\">\r\n          <div className=\"gx-form-group\">\r\n            <input className=\"ant-input gx-border-0\" type=\"search\" placeholder={placeholder}\r\n                   onChange={onChange}\r\n                   value={value}/>\r\n            <span className=\"gx-search-icon gx-pointer\"><i className=\"icon icon-search\"/></span>\r\n          </div>\r\n        </div>\r\n        <div className=\"gx-module-box-header-right\">\r\n          <span className=\"gx-fs-xl\"> <i\r\n            className=\"icon icon-apps gx-icon-btn\"/></span>\r\n          <span className=\"gx-fs-xl\"><i\r\n            className=\"icon icon-notification gx-icon-btn\"/></span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppModuleHeader;\r\n\r\nAppModuleHeader.defaultProps = {\r\n  styleName: '',\r\n  value: '',\r\n  notification: true,\r\n  apps: true\r\n};\r\n","import React from \"react\";\nimport {Avatar, Input, Modal} from \"antd\";\n\nimport IntlMessages from \"src/util/IntlMessages\";\n\nclass AddContact extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {id, thumb, name, email, phone, designation, starred, frequently} = props.contact;\n    this.state = {\n      id,\n      thumb,\n      name,\n      email,\n      phone,\n      designation,\n      starred,\n      frequently\n    }\n  }\n\n  render() {\n    const {contactId, onSaveContact, onContactClose, open, contact} = this.props;\n    const {id, name, email, phone, designation, starred, frequently} = this.state;\n    let {thumb} = this.state;\n    if (!thumb) {\n      thumb = 'src/assets/images/placeholder.jpg';\n    }\n    return (\n      <Modal\n        title={contact.name === '' ?\n          <IntlMessages id=\"contact.addContact\"/> :\n          <IntlMessages id=\"contact.saveContact\"/>}\n        toggle={onContactClose} visible={open}\n        closable={false}\n        onOk={() => {\n          if (name === '')\n            return;\n          onContactClose();\n          onSaveContact(contactId,\n            {\n              'id': id,\n              'name': name,\n              'thumb': thumb,\n              'email': email,\n              'phone': phone,\n              'designation': designation,\n              'starred': starred,\n              'frequently': frequently\n            });\n          this.setState({\n            'id': id + 1,\n            'name': '',\n            'thumb': '',\n            'email': '',\n            'phone': '',\n            'designation': '',\n          })\n\n        }}\n        onCancel={onContactClose}>\n\n        <div className=\"gx-modal-box-row\">\n          <div className=\"gx-modal-box-avatar\">\n            <Avatar size=\"large\" src={thumb}/>\n          </div>\n\n          <div className=\"gx-modal-box-form-item\">\n            <div className=\"gx-form-group\">\n              <Input\n                required\n                placeholder=\"Name\"\n                onChange={(event) => this.setState({name: event.target.value})}\n                defaultValue={name}\n                margin=\"none\"/>\n            </div>\n            <div className=\"gx-form-group\">\n              <Input\n                placeholder=\"Email\"\n                onChange={(event) => this.setState({email: event.target.value})}\n                value={email}\n                margin=\"normal\"/>\n            </div>\n            <div className=\"gx-form-group\">\n              <Input\n                placeholder=\"Phone\"\n                onChange={(event) => this.setState({phone: event.target.value})}\n                value={phone}\n                margin=\"normal\"\n              />\n            </div>\n            <div className=\"gx-form-group\">\n              <Input\n                placeholder=\"Designation\"\n                onChange={(event) => this.setState({designation: event.target.value})}\n                value={designation}\n                autosize={{minRows: 2, maxRows: 6}}\n                margin=\"normal\"/>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default AddContact;\n","import React from \"react\";\nimport {Avatar, Dropdown, Menu} from \"antd\";\n\nimport AddContact from \"../../AddContact/index\";\n\nconst options = [\n  'Edit',\n  'Delete',\n];\n\nclass ContactCell extends React.Component {\n\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onDeleteContact = () => {\n    this.setState({addContactState: false});\n    this.props.onDeleteContact(this.props.id);\n  };\n  onEditContact = () => {\n    this.setState({addContactState: true});\n  };\n  menus = () => (<Menu onClick={(e) => {\n    if (e.key === 'Edit') {\n      this.onEditContact()\n    } else {\n      this.onDeleteContact(this.props.id)\n    }\n  }\n  }>\n    {options.map(option =>\n      <Menu.Item key={option}>\n        {option}\n      </Menu.Item>,\n    )}\n  </Menu>);\n\n  constructor() {\n    super();\n    this.state = {\n      addContactState: false,\n    }\n  }\n\n  render() {\n    const {contact, addFavourite, id, onSaveContact} = this.props;\n    const {addContactState} = this.state;\n    const {name, thumb, email, phone, designation, starred} = contact;\n\n    return (\n\n      <div className=\"gx-contact-item\">\n        <div className=\"gx-module-list-icon\">\n          <div className=\"gx-d-none gx-d-sm-flex\" onClick={() => {\n            addFavourite(id, contact)\n          }}>\n            {starred ? <i className=\"gx-icon-btn icon icon-star\"/> : <i className=\"gx-icon-btn icon icon-star-o\"/>}\n          </div>\n          <div className=\"gx-ml-2 gx-d-none gx-d-sm-flex\">\n            {(thumb === null || thumb === '') ?\n              <Avatar size=\"large\">\n                {name.charAt(0).toUpperCase()}\n              </Avatar>\n              :\n              <Avatar size=\"large\" alt={name} src={thumb}/>\n            }\n          </div>\n        </div>\n\n        <div className=\"gx-module-list-info gx-contact-list-info\">\n          <div className=\"gx-module-contact-content\">\n            <p className=\"gx-mb-1\">\n              <span className=\"gx-text-truncate gx-contact-name\"> {name} </span>\n              <span className=\"gx-toolbar-separator\">&nbsp;</span>\n              <span className=\"gx-text-truncate gx-job-title\">{designation}</span>\n            </p>\n\n            <div className=\"gx-text-muted\">\n            <span className=\"gx-email gx-d-inline-block gx-mr-2\">\n                {email},\n            </span>\n              <span className=\"gx-phone gx-d-inline-block\">{phone}</span>\n            </div>\n          </div>\n\n          <div className=\"gx-module-contact-right\">\n\n            <Dropdown overlay={this.menus()} placement=\"bottomRight\" trigger={['click']}>\n              <i className=\"gx-icon-btn icon icon-ellipse-v\"/>\n            </Dropdown>\n\n            {addContactState &&\n            <AddContact open={addContactState} contact={contact} onSaveContact={onSaveContact} contactId={id}\n                        onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ContactCell;\n","import React from \"react\";\nimport _ from \"lodash\";\n\nimport ContactCell from \"./ContactCell/index\";\n\nconst ContactList = ({contactList, addFavourite, onSaveContact, onDeleteContact}) => {\n  return (\n    <div className=\"gx-contact-main-content\">\n      {_.map(contactList, (contact, key) =>\n        <ContactCell key={key} id={key} contact={contact} onDeleteContact={onDeleteContact}\n                     onSaveContact={onSaveContact}\n                     addFavourite={addFavourite} />\n      )}\n\n    </div>\n  )\n};\n\nexport default ContactList;\n","import React from 'react';\nimport CircularProgress from \"src/components/CircularProgress/index\";\nimport {message} from 'antd';\nimport Auxiliary from \"src/util/Auxiliary\";\nimport {connect} from \"react-redux\";\nimport {hideMessage} from \"src/appRedux/actions/Common\";\n\nclass InfoView extends React.Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.error || nextProps.message) {\n      setTimeout(() => {\n        this.props.hideMessage();\n      }, 3000);\n    }\n  }\n\n  render() {\n    const {error, loading, displayMessage} = this.props;\n\n    console.log(\"loading,\", loading);\n\n    return (\n      <Auxiliary>\n        {loading && <div className=\"gx-loader-view gx-loader-position\">\n          <CircularProgress/>\n        </div>}\n        {error && message.error(<span id=\"message-id\">{error}</span>)}\n        {displayMessage && message.info(<span id=\"message-id\">{displayMessage}</span>)}\n      </Auxiliary>\n    );\n  }\n}\n\nconst mapStateToProps = ({common}) => {\n  const {error, loading} = common;\n  const displayMessage = common.message;\n  return {error, loading, displayMessage};\n};\n\nexport default connect(mapStateToProps, {hideMessage})(InfoView);\n","import React, {Component} from \"react\";\nimport {Button, Drawer} from \"antd\";\nimport CustomScrollbars from \"src/util/CustomScrollbars\";\n\nimport ContactList from \"./ContactList\";\nimport AppModuleHeader from \"src/components/AppModuleHeader/index\";\nimport InfoView from \"src/components/InfoView/index\";\nimport AddContact from \"./AddContact\";\nimport IntlMessages from \"src/util/IntlMessages\";\nimport {connect} from \"react-redux\";\nimport _ from \"lodash\";\nimport {onAddContact, onDeleteContact, onGetAllContact, onUpdateContact} from \"../../../appRedux/actions/Contact\";\n\nlet contactId = 723812738;\n\nconst filterOptions = [\n  {\n    id: 1,\n    name: 'All contacts',\n    icon: 'all-contacts'\n  }, {\n    id: 2,\n    name: 'Frequently contacted',\n    icon: 'frequent'\n\n  }, {\n\n    id: 3,\n    name: 'Starred contacts',\n    icon: 'star'\n  }\n];\n\nclass FirebaseCRUD extends Component {\n\n\n  constructor() {\n    super();\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: [],\n      contactList: [],\n      selectedContact: null,\n      addContactState: false,\n    }\n  }\n\n  componentWillMount() {\n    this.props.onGetAllContact();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"contactList\", nextProps.contactList)\n    if (nextProps.contactList) {\n      this.setState({\n        allContact: nextProps.contactList,\n        contactList: nextProps.contactList,\n      })\n    }\n  }\n\n  ContactSideBar = (user) => {\n    return <div className=\"gx-module-side\">\n      <div className=\"gx-module-side-header\">\n        <div className=\"gx-module-logo\">\n          <i className=\"icon icon-contacts gx-mr-4\"/>\n          <span><IntlMessages id=\"chat.contacts\"/></span>\n        </div>\n      </div>\n\n      <div className=\"gx-module-side-content\">\n        <CustomScrollbars className=\"gx-module-side-scroll\">\n          <div className=\"gx-module-add-task\">\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"icon icon-add gx-mr-2\"/>\n              <span>Add New Contact</span>\n            </Button>\n          </div>\n          <div className=\"gx-module-side-nav\">\n            <ul className=\"gx-module-nav\">\n              {filterOptions.map(option => <li key={option.id} className=\"gx-nav-item\">\n                  <span\n                    className={`gx-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\n                    this.onFilterOptionSelect.bind(this, option)\n                  }>\n                    <i className={`icon icon-${option.icon}`}/>\n                    <span>{option.name}</span>\n                  </span>\n                </li>\n              )}\n\n            </ul>\n          </div>\n        </CustomScrollbars>\n      </div>\n    </div>\n\n  };\n\n  addFavourite = (id, data) => {\n    let contact = data;\n    contact.starred = !data.starred;\n    this.props.onUpdateContact(id, contact);\n  };\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onFilterOptionSelect = (option) => {\n    switch (option.name) {\n      case 'All contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact\n        });\n        break;\n      }\n      case 'Frequently contacted': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: _.filter(this.state.allContact, (contact, key) => contact.frequently)\n        });\n        break;\n      }\n      case 'Starred contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: _.filter(this.state.allContact, (contact) => contact.starred)\n        });\n        break;\n      }\n      default:\n        break;\n    }\n\n  };\n  onSaveContact = (id, data) => {\n    if (id) {\n      this.props.onUpdateContact(id, data);\n    } else {\n      this.props.onAddContact(data);\n    }\n  };\n  onDeleteContact = (data) => {\n    this.props.onDeleteContact(data);\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = _.filter(this.state.allContact, (contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, contactList, addContactState, drawerState, noContentFoundMessage} = this.state;\n    return (\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar()}\n            </Drawer>\n          </div>\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.ContactSideBar(user)}\n          </div>\n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"gx-module-box-content\">\n\n              <div className=\"gx-module-box-topbar\">\n\n              </div>\n              <CustomScrollbars className=\"gx-module-content-scroll\">\n                {contactList.length === 0 ?\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <ContactList contactList={contactList}\n                                 addFavourite={this.addFavourite}\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddContact open={addContactState} contact={{\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'starred': false,\n          'frequently': false,\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n        <InfoView/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({contact}) => {\n  const {contactList, selectedContact} = contact;\n  return {contactList, selectedContact}\n};\nexport default connect(mapStateToProps, {\n  onGetAllContact,\n  onAddContact,\n  onUpdateContact,\n  onDeleteContact\n})(FirebaseCRUD);\n","import {FETCH_START, FETCH_SUCCESS, GET_All_CONTACT_SUCCESS} from \"../../constants/ActionTypes\";\r\nimport {database} from \"../../firebase/firebase\";\r\n\r\nexport const onGetAllContact = () => {\r\n  return (dispatch) => {\r\n    dispatch({type: FETCH_START});\r\n    database.ref('/contact').on('value', snapshot => {\r\n      dispatch({type: FETCH_SUCCESS});\r\n      dispatch({\r\n        type: GET_All_CONTACT_SUCCESS,\r\n        payload: snapshot.val()\r\n      });\r\n    })\r\n  };\r\n};\r\n\r\nexport const onAddContact = (contact) => {\r\n  return dispatch => database.ref('/contact').push(contact);\r\n};\r\n\r\n\r\nexport const onUpdateContact = (id, contact) => {\r\n\r\n  return dispatch => database.ref('/contact').child(id).update(contact);\r\n};\r\n\r\nexport const onDeleteContact = (id) => {\r\n  return dispatch => database.ref('/contact').child(id).remove();\r\n};\r\n"],"sourceRoot":""}