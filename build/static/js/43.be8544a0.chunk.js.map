{"version":3,"sources":["../node_modules/antd/es/auto-complete/style/index.js","../node_modules/antd/es/auto-complete/index.js","routes/components/dataEntry/AutoComplete/Basic.js","routes/components/dataEntry/AutoComplete/Customized.js","routes/components/dataEntry/AutoComplete/CustomizeInputComponent.js","routes/components/dataEntry/AutoComplete/NonCaseSensitiveAutoComplete.js","routes/components/dataEntry/AutoComplete/LookupPatterns.js","routes/components/dataEntry/AutoComplete/index.js"],"names":["Option","Select","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","customizeInput","customizePrefixCls","prefixCls","className","children","dataSource","childNodes","toArray","length","isValidElement","_childNodes","_slicedToArray","optionChildren","getInputElement","undefined","map","item","_typeof","React","key","value","optionValue","text","Error","devWarning","ConfigConsumer","_ref","getPrefixCls","_extends","omit","classNames","concat","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","onSelect","console","log","Basic","state","handleSearch","setState","this","title","style","width","onSearch","placeholder","Component","Customized","result","indexOf","domain","email","TextArea","CustomizeInputComponent","handleKeyPress","ev","height","onKeyPress","NonCaseSensitiveAutoComplete","filterOption","inputValue","option","toUpperCase","OptGroup","options","count","group","label","float","href","target","rel","opt","disabled","LookupPatterns","dropdownClassName","dropdownMatchSelectWidth","dropdownStyle","size","optionLabelProp","suffix","lg","md","sm","xs"],"mappings":"sIAAA,uB,kCCAA,qGAmBIA,EAASC,IAAOD,OAEpB,SAASE,EAA+BC,GACtC,OAAOA,GAASA,EAAMC,OAASD,EAAMC,KAAKC,gBAAkBF,EAAMC,KAAKE,kBAGzE,IAAIC,EAAe,SAAsBC,EAAOC,GAC9C,IAMIC,EANAC,EAAqBH,EAAMI,UAC3BC,EAAYL,EAAMK,UAClBC,EAAWN,EAAMM,SACjBC,EAAaP,EAAMO,WACnBC,EAAaC,YAAQH,GAIzB,GAA0B,IAAtBE,EAAWE,QAAgBC,YAAeH,EAAW,MAAQd,EAA+Bc,EAAW,IAAK,CAC9G,IAAII,EAAcC,YAAeL,EAAY,GAE7CN,EAAiBU,EAAY,GAG/B,IAIIE,EAJAC,EAAkBb,EAAiB,WACrC,OAAOA,QACLc,EAuCJ,OAlCEF,EADEN,EAAWE,QAAUhB,EAA+Bc,EAAW,IAChDF,EAEAC,EAAaA,EAAWU,KAAI,SAAUC,GACrD,GAAIP,YAAeO,GACjB,OAAOA,EAGT,OAAQC,YAAQD,IACd,IAAK,SACH,OAAoBE,gBAAoB5B,EAAQ,CAC9C6B,IAAKH,EACLI,MAAOJ,GACNA,GAEL,IAAK,SAED,IAAIK,EAAcL,EAAKI,MACvB,OAAoBF,gBAAoB5B,EAAQ,CAC9C6B,IAAKE,EACLD,MAAOC,GACNL,EAAKM,MAGZ,QACE,MAAM,IAAIC,MAAM,0EAEjB,GAIPL,aAAgB,WACdM,cAAa,eAAgB1B,GAAQ,eAAgB,6DACrD0B,aAAYxB,KAAoB,SAAUF,GAAQ,eAAgB,0FACjE,IACiBoB,gBAAoBO,IAAgB,MAAM,SAAUC,GACtE,IACIxB,GAAYyB,EADGD,EAAKC,cACK,SAAU1B,GACvC,OAAoBiB,gBAAoB3B,IAAQqC,YAAS,CACvD7B,IAAKA,GACJ8B,YAAK/B,EAAO,CAAC,eAAgB,CAC9BI,UAAWA,EACXC,UAAW2B,IAAW,GAAGC,OAAO7B,EAAW,kBAAmBC,GAC9D6B,KAAMzC,IAAO0C,gCAEbpB,gBAAiBA,IACfD,OAIJsB,EAA+BhB,aAAiBrB,GACpDqC,EAAgB5C,OAASA,EACV4C,O,wLC9Ff,SAASC,EAASf,GAChBgB,QAAQC,IAAI,WAAYjB,G,IAIpBkB,E,4MACJC,MAAQ,CACNlC,WAAY,I,EAGdmC,aAAe,SAACpB,GACd,EAAKqB,SAAS,CACZpC,WAAae,EAAa,CACxBA,EACAA,EAAQA,EACRA,EAAQA,EAAQA,GAHG,M,4CAQzB,WACE,IAAOf,EAAcqC,KAAKH,MAAnBlC,WACP,OACE,mBAAMF,UAAU,UAAUwC,MAAM,cAAhC,SACE,mBACEtC,WAAYA,EACZuC,MAAO,CAACC,MAAO,KACfV,SAAUA,EACVW,SAAUJ,KAAKF,aACfO,YAAY,qB,GAxBFC,aAiCLV,ICtCThD,EAAS,IAAaA,OAGtB2D,E,4MACJV,MAAQ,CACNW,OAAQ,I,EAGVV,aAAe,SAACpB,GACd,IAAI8B,EAEFA,GADG9B,GAASA,EAAM+B,QAAQ,MAAQ,EACzB,GAEA,CAAC,YAAa,UAAW,UAAUpC,KAAI,SAAAqC,GAAM,gBAAOhC,EAAP,YAAgBgC,MAExE,EAAKX,SAAS,CAACS,Y,4CAGjB,WACE,IACM9C,EADWsC,KAAKH,MAAfW,OACiBnC,KAAI,SAACsC,GAC3B,OAAO,cAAC/D,EAAD,UAAqB+D,GAARA,MAEtB,OACE,mBAAMlD,UAAU,UAAUwC,MAAM,aAAhC,SACE,mBACEC,MAAO,CAACC,MAAO,KACfC,SAAUJ,KAAKF,aACfO,YAAY,aAHd,SAKG3C,U,GA3Bc4C,aAoCVC,I,kBCxCRK,EAAP,IAAOA,SAEP,SAASnB,EAASf,GAChBgB,QAAQC,IAAI,WAAYjB,G,IAIpBmC,E,4MACJhB,MAAQ,CACNlC,WAAY,I,EAGdmC,aAAe,SAACpB,GACd,EAAKqB,SAAS,CACZpC,WAAae,EAAa,CACxBA,EACAA,EAAQA,EACRA,EAAQA,EAAQA,GAHG,M,EAQzBoC,eAAiB,SAACC,GAChBrB,QAAQC,IAAI,iBAAkBoB,I,4CAIhC,WACE,IAAOpD,EAAcqC,KAAKH,MAAnBlC,WACP,OACE,mBAAMF,UAAU,UAAUwC,MAAM,4BAAhC,SACE,mBACEtC,WAAYA,EACZuC,MAAO,CAACC,MAAO,KACfV,SAAUA,EACVW,SAAUJ,KAAKF,aAJjB,SAMA,cAACc,EAAD,CACEP,YAAY,aACZ5C,UAAU,SACVyC,MAAO,CAACc,OAAQ,IAChBC,WAAYjB,KAAKc,yB,GAlCWR,aA2CvBO,IClDTlD,EAAa,CAAC,iBAAkB,iBAAkB,eAezCuD,EAbsB,WACnC,OACE,mBAAMzD,UAAU,UAAUwC,MAAM,iCAAhC,SACE,mBACEC,MAAO,CAACC,MAAO,KACfxC,WAAYA,EACZ0C,YAAY,kBACZc,aAAc,SAACC,EAAYC,GAAb,OAAmG,IAA3EA,EAAOjE,MAAMM,SAAS4D,cAAcb,QAAQW,EAAWE,qB,UCR/F1E,EAAS,IAAaA,OACtB2E,EAAW,IAAaA,SA2C9B,IAAMC,EAzCa,CAAC,CAClBvB,MAAO,SACPvC,SAAU,CAAC,CACTuC,MAAO,YACPwB,MAAO,KACN,CACDxB,MAAO,eACPwB,MAAO,SAER,CACDxB,MAAO,QACPvC,SAAU,CAAC,CACTuC,MAAO,WACPwB,MAAO,OACN,CACDxB,MAAO,YACPwB,MAAO,SAER,CACDxB,MAAO,QACPvC,SAAU,CAAC,CACTuC,MAAO,gBACPwB,MAAO,QAmBgBpD,KAAI,SAAAqD,GAAK,OAClC,cAACH,EAAD,CAEEI,OAlBiB1B,EAkBEyB,EAAMzB,MAhBzB,iCACGA,EACD,mBACEC,MAAO,CAAC0B,MAAO,SACfC,KAAK,uCACLC,OAAO,SACPC,IAAI,sBAJN,6BAYJ,SAIGL,EAAMhE,SAASW,KAAI,SAAA2D,GAAG,OACrB,eAAC,EAAD,CAAwBtD,MAAOsD,EAAI/B,MAAnC,UACG+B,EAAI/B,MACL,sBAAMxC,UAAU,4BAAhB,SAA6CuE,EAAIP,UAFtCO,EAAI/B,WAJdyB,EAAMzB,OAjBf,IAAqBA,KA2BlBZ,OAAO,CACR,cAAC,EAAD,CAAQ4C,UAAQ,EAAWxE,UAAU,WAArC,SACE,mBACEoE,KAAK,uCACLC,OAAO,SACPC,IAAI,sBAHN,0BADmB,SAkCRG,EAvBQ,WACnB,OACE,mBAAMzE,UAAU,UAAUwC,MAAM,kBAAhC,SACE,qBAAKxC,UAAU,kCAAkCyC,MAAO,CAACC,MAAO,KAAhE,SACE,mBACE1C,UAAU,0BACV0E,kBAAkB,mCAClBC,0BAA0B,EAC1BC,cAAe,CAAClC,MAAO,KACvBmC,KAAK,QACLpC,MAAO,CAACC,MAAO,QACfxC,WAAY6D,EACZnB,YAAY,aACZkC,gBAAgB,QATlB,SAWE,mBAAOC,OAAQ,cAAC,IAAD,CAAMxF,KAAK,SAASS,UAAU,mCC9D1CN,UAhBM,WACnB,OACE,8BACE,oBAAKsF,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAjC,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,OAEF,oBAAKH,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAjC,UACE,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/43.be8544a0.chunk.js","sourcesContent":["import '../../style/index.less';\nimport './index.less'; // style dependencies\n\nimport '../../select/style';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport devWarning from '../_util/devWarning';\nimport { isValidElement } from '../_util/reactNode';\nvar Option = Select.Option;\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      children = props.children,\n      dataSource = props.dataSource;\n  var childNodes = toArray(children); // ============================= Input =============================\n\n  var customizeInput;\n\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n\n    customizeInput = _childNodes[0];\n  }\n\n  var getInputElement = customizeInput ? function () {\n    return customizeInput;\n  } : undefined; // ============================ Options ============================\n\n  var optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n\n      switch (_typeof(item)) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n\n        case 'object':\n          {\n            var optionValue = item.value;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n\n        default:\n          throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n      }\n    }) : [];\n  } // ============================ Warning ============================\n\n\n  React.useEffect(function () {\n    devWarning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n    devWarning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n  }, []);\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return /*#__PURE__*/React.createElement(Select, _extends({\n      ref: ref\n    }, omit(props, ['dataSource']), {\n      prefixCls: prefixCls,\n      className: classNames(\"\".concat(prefixCls, \"-auto-complete\"), className),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n      // Internal api\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\n\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;","import React, {Component} from \"react\";\r\n\r\nimport {AutoComplete, Card} from \"antd\";\r\n\r\nfunction onSelect(value) {\r\n  console.log('onSelect', value);\r\n}\r\n\r\n\r\nclass Basic extends Component {\r\n  state = {\r\n    dataSource: [],\r\n  }\r\n\r\n  handleSearch = (value) => {\r\n    this.setState({\r\n      dataSource: !value ? [] : [\r\n        value,\r\n        value + value,\r\n        value + value + value,\r\n      ],\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {dataSource} = this.state;\r\n    return (\r\n      <Card className=\"gx-card\" title=\"ErrorStatus\">\r\n        <AutoComplete\r\n          dataSource={dataSource}\r\n          style={{width: 200}}\r\n          onSelect={onSelect}\r\n          onSearch={this.handleSearch}\r\n          placeholder=\"input here\"\r\n        />\r\n      </Card>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Basic;\r\n\r\n","import React, {Component} from \"react\";\r\n\r\nimport {AutoComplete, Card} from \"antd\";\r\n\r\nconst Option = AutoComplete.Option;\r\n\r\n\r\nclass Customized extends Component {\r\n  state = {\r\n    result: [],\r\n  };\r\n\r\n  handleSearch = (value) => {\r\n    let result;\r\n    if (!value || value.indexOf('@') >= 0) {\r\n      result = [];\r\n    } else {\r\n      result = ['gmail.com', '163.com', 'qq.com'].map(domain => `${value}@${domain}`);\r\n    }\r\n    this.setState({result});\r\n  };\r\n\r\n  render() {\r\n    const {result} = this.state;\r\n    const children = result.map((email) => {\r\n      return <Option key={email}>{email}</Option>;\r\n    });\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Customized\">\r\n        <AutoComplete\r\n          style={{width: 200}}\r\n          onSearch={this.handleSearch}\r\n          placeholder=\"input here\"\r\n        >\r\n          {children}\r\n        </AutoComplete>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Customized;\r\n\r\n","import React, {Component} from \"react\";\r\nimport {AutoComplete, Card, Input} from \"antd\";\r\n\r\nconst {TextArea} = Input;\r\n\r\nfunction onSelect(value) {\r\n  console.log('onSelect', value);\r\n}\r\n\r\n\r\nclass CustomizeInputComponent extends Component {\r\n  state = {\r\n    dataSource: [],\r\n  }\r\n\r\n  handleSearch = (value) => {\r\n    this.setState({\r\n      dataSource: !value ? [] : [\r\n        value,\r\n        value + value,\r\n        value + value + value,\r\n      ],\r\n    });\r\n  }\r\n\r\n  handleKeyPress = (ev) => {\r\n    console.log('handleKeyPress', ev);\r\n  }\r\n\r\n\r\n  render() {\r\n    const {dataSource} = this.state;\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Customize Input Component\">\r\n        <AutoComplete\r\n          dataSource={dataSource}\r\n          style={{width: 200}}\r\n          onSelect={onSelect}\r\n          onSearch={this.handleSearch}\r\n        >\r\n        <TextArea\r\n          placeholder=\"input here\"\r\n          className=\"custom\"\r\n          style={{height: 50}}\r\n          onKeyPress={this.handleKeyPress}\r\n        />\r\n        </AutoComplete>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default CustomizeInputComponent;\r\n\r\n","import React from \"react\";\r\nimport {AutoComplete, Card} from \"antd\";\r\n\r\nconst dataSource = ['Burns Bay Road', 'Downing Street', 'Wall Street'];\r\n\r\nconst NonCaseSensitiveAutoComplete = () => {\r\n  return (\r\n    <Card className=\"gx-card\" title=\"Non CaseSensitive AutoComplete\">\r\n      <AutoComplete\r\n        style={{width: 200}}\r\n        dataSource={dataSource}\r\n        placeholder=\"try to type `b`\"\r\n        filterOption={(inputValue, option) => option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NonCaseSensitiveAutoComplete;\r\n","import React from \"react\";\r\nimport {AutoComplete, Card, Input} from \"antd\";\r\nimport { Icon } from \"@ant-design/compatible\";\r\n\r\nconst Option = AutoComplete.Option;\r\nconst OptGroup = AutoComplete.OptGroup;\r\n\r\nconst dataSource = [{\r\n  title: 'g-axon',\r\n  children: [{\r\n    title: 'AntDesign',\r\n    count: 10000,\r\n  }, {\r\n    title: 'AntDesign UI',\r\n    count: 10600,\r\n  }],\r\n}, {\r\n  title: 'jumbo',\r\n  children: [{\r\n    title: 'jumbo UI',\r\n    count: 60100,\r\n  }, {\r\n    title: 'AntDesign',\r\n    count: 30010,\r\n  }],\r\n}, {\r\n  title: 'React',\r\n  children: [{\r\n    title: 'AntDesign 2.0',\r\n    count: 100000,\r\n  }],\r\n}];\r\n\r\nfunction renderTitle(title) {\r\n  return (\r\n    <span>\r\n      {title}\r\n      <a\r\n        style={{float: 'right'}}\r\n        href=\"https://www.google.com/search?q=antd\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >version 1.1\r\n      </a>\r\n    </span>\r\n  );\r\n}\r\n\r\nconst options = dataSource.map(group => (\r\n  <OptGroup\r\n    key={group.title}\r\n    label={renderTitle(group.title)}\r\n  >\r\n    {group.children.map(opt => (\r\n      <Option key={opt.title} value={opt.title}>\r\n        {opt.title}\r\n        <span className=\"certain-search-item-count\">{opt.count}</span>\r\n      </Option>\r\n    ))}\r\n  </OptGroup>\r\n)).concat([\r\n  <Option disabled key=\"all\" className=\"show-all\">\r\n    <a\r\n      href=\"https://www.google.com/search?q=antd\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      version 1.2\r\n    </a>\r\n  </Option>,\r\n]);\r\n\r\nconst LookupPatterns = () => {\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Lookup Patterns\">\r\n        <div className=\"certain-category-search-wrapper\" style={{width: 250}}>\r\n          <AutoComplete\r\n            className=\"certain-category-search\"\r\n            dropdownClassName=\"certain-category-search-dropdown\"\r\n            dropdownMatchSelectWidth={false}\r\n            dropdownStyle={{width: 300}}\r\n            size=\"large\"\r\n            style={{width: '100%'}}\r\n            dataSource={options}\r\n            placeholder=\"input here\"\r\n            optionLabelProp=\"value\"\r\n          >\r\n            <Input suffix={<Icon type=\"search\" className=\"certain-category-icon\"/>}/>\r\n          </AutoComplete>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n;\r\n\r\nexport default LookupPatterns;\r\n","import React from \"react\";\r\nimport {Col, Row} from \"antd\";\r\n\r\nimport Basic from \"./Basic\";\r\nimport Customized from \"./Customized\";\r\nimport CustomizeInputComponent from \"./CustomizeInputComponent\";\r\nimport NonCaseSensitiveAutoComplete from \"./NonCaseSensitiveAutoComplete\";\r\nimport LookupPatterns from \"./LookupPatterns\";\r\n\r\nconst AutoComplete = () => {\r\n  return (\r\n    <Row>\r\n      <Col lg={12} md={12} sm={24} xs={24}>\r\n        <Basic/>\r\n        <Customized/>\r\n        <CustomizeInputComponent/>\r\n      </Col>\r\n      <Col lg={12} md={12} sm={24} xs={24}>\r\n        <NonCaseSensitiveAutoComplete/>\r\n        <LookupPatterns/>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default AutoComplete;\r\n"],"sourceRoot":""}